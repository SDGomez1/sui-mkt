generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/@prisma-db/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProductType {
  PURCHASABLE
  TRIAL
}

model User {
  id            String           @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  cart          Cart?
  orders        Order[]
  freeTrials    UserFreeTrials[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Product {
  id            String           @id @default(nanoid())
  name          String
  description   String
  price         Decimal          @db.Decimal(10, 2)
  sku           String           @unique
  featuredImage String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  cartItems     CartItem[]
  productImages ProductImage[]
  orderItems    OrderItem[]
  url           String           @default("/")
  productType   ProductType      @default(PURCHASABLE)
  freeTrials    UserFreeTrials[]
  fragances     Fragrance[]
}

model ProductImage {
  id        String  @id @default(nanoid())
  productId String  @unique
  imageUrl  String
  product   Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        String     @id @default(nanoid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique 
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model CartItem {
  id          String    @id @default(nanoid())
  cart        Cart      @relation(fields: [cartId], references: [id])
  cartId      String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  fragrance   Fragrance @relation(fields: [fragranceId], references: [id])
  fragranceId String
  quantity    Int
  addedAt     DateTime  @default(now())

  @@unique([cartId, productId, fragranceId])
}

model Order {
  id               String      @id @default(nanoid())
  userId           String?
  user             User?       @relation(fields: [userId], references: [id], onDelete: Restrict)
  total            Decimal     @db.Decimal(12, 2)
  billingFirstName String
  billingLastName  String
  billingEmail     String
  billingPhone     String
  billingAddress   String
  billingNotes     String?
  items            OrderItem[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model OrderItem {
  id          String    @id @default(nanoid())
  orderId     String
  quantity    Int
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Restrict)
  fragrance   Fragrance @relation(fields: [fragranceId], references: [id], onDelete: Restrict) // Link to Fragrance
  fragranceId String
}

model UserFreeTrials {
  id          String    @id @default(nanoid())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Restrict)
  name        String?
  phone       String?
  address     String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  fragrance   Fragrance @relation(fields: [fragranceId], references: [id], onDelete: Restrict) // Link to Fragrance
  fragranceId String

  @@unique([productId])
}

model Fragrance {
  id             String           @id @default(nanoid())
  name           String 
  stockQuantity  Int              @default(0) 
  productId      String
  product        Product          @relation(fields: [productId], references: [id])
  cartItems      CartItem[]
  orderItems     OrderItem[]
  userFreeTrials UserFreeTrials[]
}
